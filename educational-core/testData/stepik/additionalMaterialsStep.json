{
  "meta": {
    "page": 1,
    "has_next": false,
    "has_previous": false
  },
  "steps": [
    {
      "id": 243558,
      "lesson": 61864,
      "position": 1,
      "status": "ready",
      "block": {
        "name": "pycharm",
        "text": "",
        "video": null,
        "animation": null,
        "options": {
          "format_version": 3,
          "files": [],
          "test": [
            {
              "name": "test_helperq.py",
              "text": "import sys\n\n\ndef get_file_text(path):\n    \"\"\" Returns file text by path\"\"\"\n    file_io = open(path, \"r\")\n    text = file_io.read()\n    file_io.close()\n    return text\n\n\ndef get_file_output(encoding=\"utf-8\", path=sys.argv[-1], arg_string=\"\"):\n    \"\"\"\n    Returns answer file output\n    :param encoding: to decode output in python3\n    :param path: path of file to execute\n    :return: list of strings\n    \"\"\"\n    import subprocess\n\n    proc = subprocess.Popen([sys.executable, path], stdin=subprocess.PIPE, stdout=subprocess.PIPE,\n                            stderr=subprocess.STDOUT)\n    if arg_string:\n        for arg in arg_string.split(\"\\n\"):\n            proc.stdin.write(bytearray(str(arg) + \"\\n\", encoding))\n            proc.stdin.flush()\n\n    return list(map(lambda x: str(x.decode(encoding)), proc.communicate()[0].splitlines()))\n\n\ndef test_file_importable():\n    \"\"\" Tests there is no obvious syntax errors\"\"\"\n    path = sys.argv[-1]\n    if not path.endswith(\".py\"):\n        import os\n\n        parent = os.path.abspath(os.path.join(path, os.pardir))\n        python_files = [f for f in os.listdir(parent) if os.path.isfile(os.path.join(parent, f)) and f.endswith(\".py\")]\n        for python_file in python_files:\n            if python_file == \"tests.py\":\n                continue\n            check_importable_path(os.path.join(parent, python_file))\n        return\n    check_importable_path(path)\n\n\ndef check_importable_path(path):\n    \"\"\" Checks that file is importable.\n        Reports failure otherwise.\n    \"\"\"\n    saved_input = patch_input()\n    try:\n        import_file(path)\n    except:\n        failed(\"The file contains syntax errors\", test_file_importable.__name__)\n        return\n    finally:\n        revert_input(saved_input)\n\n    passed(test_file_importable.__name__)\n\n\ndef patch_input():\n    def mock_fun(_m=\"\"):\n        return \"mock\"\n\n    if sys.version_info[0] == 3:\n        import builtins\n        save_input = builtins.input\n        builtins.input = mock_fun\n        return save_input\n    elif sys.version_info[0] == 2:\n        import __builtin__\n        save_input = __builtin__.raw_input\n        __builtin__.raw_input = mock_fun\n        __builtin__.input = mock_fun\n        return save_input\n\n\ndef revert_input(saved_input):\n    if sys.version_info[0] == 3:\n        import builtins\n        builtins.input = saved_input\n    elif sys.version_info[0] == 2:\n        import __builtin__\n        __builtin__.raw_input = saved_input\n        __builtin__.input = saved_input\n\n\ndef import_file(path):\n    \"\"\" Returns imported file \"\"\"\n    if sys.version_info[0] == 2 or sys.version_info[1] < 3:\n        import imp\n\n        return imp.load_source(\"tmp\", path)\n    elif sys.version_info[0] == 3:\n        import importlib.machinery\n\n        return importlib.machinery.SourceFileLoader(\"tmp\", path).load_module(\"tmp\")\n\n\ndef import_task_file():\n    \"\"\" Returns imported file.\n        Imports file from which check action was run\n    \"\"\"\n    path = sys.argv[-1]\n    return import_file(path)\n\n\ndef test_is_not_empty():\n    \"\"\"\n        Checks that file is not empty\n    \"\"\"\n    path = sys.argv[-1]\n    file_text = get_file_text(path)\n\n    if len(file_text) > 0:\n        passed()\n    else:\n        failed(\"The file is empty. Please, reload the task and try again.\")\n\n\ndef test_text_equals(text, error_text):\n    \"\"\"\n        Checks that answer equals text.\n    \"\"\"\n    path = sys.argv[-1]\n    file_text = get_file_text(path)\n\n    if file_text.strip() == text:\n        passed()\n    else:\n        failed(error_text)\n\n\ndef test_answer_placeholders_text_deleted(error_text=\"Don't just delete task text\"):\n    \"\"\"\n        Checks that all answer placeholders are not empty\n    \"\"\"\n    windows = get_answer_placeholders()\n\n    for window in windows:\n        if len(window) == 0:\n            failed(error_text)\n            return\n    passed()\n\n\ndef set_congratulation_message(message):\n    \"\"\" Overrides default 'Congratulations!' message \"\"\"\n    print(\"#educational_plugin CONGRATS_MESSAGE \" + message)\n\n\ndef failed(message=\"Please, reload the task and try again.\", name=None):\n    \"\"\" Reports failure \"\"\"\n    if not name:\n        name = sys._getframe().f_back.f_code.co_name\n    print(\"#educational_plugin \" + name + \" FAILED + \" + message)\n\n\ndef passed(name=None):\n    \"\"\" Reports success \"\"\"\n    if not name:\n        name = sys._getframe().f_back.f_code.co_name\n    print(\"#educational_plugin \" + name + \" test OK\")\n\n\ndef get_answer_placeholders():\n    \"\"\"\n        Returns all answer placeholders text\n    \"\"\"\n    prefix = \"#educational_plugin_window = \"\n    path = sys.argv[-1]\n    import os\n\n    file_name_without_extension = os.path.splitext(path)[0]\n    windows_path = file_name_without_extension + \"_windows\"\n    windows = []\n    f = open(windows_path, \"r\")\n    window_text = \"\"\n    first = True\n    for line in f.readlines():\n        if line.startswith(prefix):\n            if not first:\n                windows.append(window_text.strip())\n            else:\n                first = False\n            window_text = line[len(prefix):]\n        else:\n            window_text += line\n\n    if window_text:\n        windows.append(window_text.strip())\n\n    f.close()\n    return windows\n\n\ndef check_samples(samples=()):\n    \"\"\"\n      Check script output for all samples. Sample is a two element list, where the first is input and\n      the second is output.\n    \"\"\"\n    for sample in samples:\n        if len(sample) == 2:\n            output = get_file_output(arg_string=str(sample[0]))\n            if \"\\n\".join(output) != sample[1]:\n                failed(\n                    \"Test from samples failed: \\n \\n\"\n                    \"Input:\\n{}\"\n                    \"\\n \\n\"\n                    \"Expected:\\n{}\"\n                    \"\\n \\n\"\n                    \"Your result:\\n{}\".format(str.strip(sample[0]), str.strip(sample[1]), \"\\n\".join(output)))\n                return\n        set_congratulation_message(\"All test from samples passed. Now we are checking your solution on Stepic server.\")\n\n    passed()\n\n\ndef run_common_tests(error_text=\"Please, reload file and try again\"):\n    test_is_not_empty()\n    test_answer_placeholders_text_deleted()\n    test_file_importable()\n"
            }
          ],
          "title": "PyCharm additional materials"
        },
        "subtitle_files": []
      },
      "actions": {
        "submit": "#",
        "edit_instructions": "#"
      },
      "progress": "77-243558",
      "subscriptions": [
        "31-77-243558",
        "30-77-243558"
      ],
      "instruction": null,
      "session": null,
      "instruction_type": null,
      "viewed_by": 0,
      "passed_by": 0,
      "correct_ratio": null,
      "worth": null,
      "is_solutions_unlocked": false,
      "solutions_unlocked_attempts": 3,
      "has_submissions_restrictions": false,
      "max_submissions_count": 3,
      "variation": 1,
      "variations_count": 1,
      "create_date": "2017-11-22T10:14:00Z",
      "update_date": "2017-11-22T10:14:00Z",
      "discussions_count": 0,
      "discussion_proxy": "77-243558-1",
      "discussion_threads": [
        "77-243558-1",
        "77-243558-2"
      ]
    }
  ]
}